{"name":"jQuery Timer DEMO","tagline":"更简便的计时器方法。取代原生 js 计时器，封装了 setInterval 和 setTimeout。标记通过 Data 的方式缓存在 jQuery 元素上。","body":"## 目录\r\n* [特性](#特性)\r\n* [下载](#下载)\r\n* [快速上手](#快速上手)\r\n* [所有示例](#所有示例)\r\n* [参数说明](#参数说明)\r\n* [更新日志](#更新日志)\r\n\r\n## 特性\r\n* 兼容最新的 jQuery\r\n* 方法较少，使用简单便捷\r\n* 实例丰富，学习成本较低\r\n\r\n## 下载\r\n* [jquery-timer.js](jquery-timer.js) *(开发版,3.0kb)*\r\n* [jquery-timer-min.js](jquery-timer-min.js) *(生产版,0.7kb)*\r\n\r\n## 快速上手\r\n```javascript\r\n//两秒以后弹出对话框.\r\n$(\"body\").setTimer(function() {\r\n\talert(\"Hello jQuery Timer!\");\r\n});\r\n```\r\n\r\n## 所有示例\r\n1. [设定延迟执行函数，开始使用计时器插件](demo/param-fun.html)\r\n2. [设定回调间隔时间](demo/param-time.html)\r\n3. [指定回调的次数](demo/param-iCount.html)\r\n4. [指定是否立即执行](demo/param-immediately.html)\r\n5. [设置回调函数（所有回调结束以后调用）](demo/param-callback.html)\r\n6. [创建倒计时程序](demo/pay0.html)\r\n7. [创建计数器程序](demo/pay1.html)\r\n8. [动态截取文本显示示例](demo/pay2.html)\r\n\r\n## 参数说明\r\n\r\nsetTimer 方法接收的可选参数，依照参数顺序列举\r\n\r\n参数 | 类型 | 默认值 | 说明\r\n------------ | ------------ | ------------ | ------------\r\nfun | Function | $.noop | 计时器延迟执行的回调函数，接受一个可选参数标识当前回调执行的次数，同时接受第二个参数可获得目标次数\r\ntime | Number | 2000 | 计时器回调时间间隔，时间单位是毫秒\r\niCount | Number | 1 | 计时器回调次数。小等于0则进行无限循环，直到调用 stopTimer 终止。比如设为 0 或者 -1 时。\r\nimmediately | Boolean | false | 是否立即执行。当设置为 true 时立即执行一次回调函数。\r\ncallback | Function | $.noop | 计时完成后的回调函数，回调参数达到，所有回调完成后执行的最终回调函数（无限循环回调失效）\r\n\r\n## 更新日志\r\n##### v1.0.0 beta\r\n1. 创建项目初始代码\r\n2. 发布说明和示例\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}